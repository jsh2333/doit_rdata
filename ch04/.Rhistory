name = 행정구역별_읍면동
)
korpop1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동
)
korpop1[,총인구_명]
korpop1[총인구_명,]
korpop1
library(kormaps2014)
str(korpop1)
str(changeCode(korpop1))
korpop1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동
)
ggChoropleth(data = korpop1,
aes(fill= pop,
map_id = code,
tooltip=name),
map = kormap1,
interactive = T)
ggChoropleth(data = korpop1,
aes(fill= pop,
map_id = code,
tooltip=name),
map = kormap1,
interactive = T, options(encoding = "cp949"))
ggChoropleth(data = korpop1,
aes(fill= pop,
map_id = code,
tooltip=name),
map = kormap1,
interactive = T, options(encoding = "cp949"))
install.packages("stringi")
install.packages("stringi")
str(changeCode(korpop1))
install.packages("devtools")
devtools::install_github("cardiomoon/kormaps2014")
devtools::install_github("cardiomoon/kormaps2014" force = TRUE)
devtools::install_github("cardiomoon/kormaps2014", force = TRUE)
library(kormaps2014)
str(changeCode(korpop1))
library(dplyr)
korpop1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동)
rm(korpop1)
str(changeCode(korpop1))
library(dplyr)
korpop1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동)
str(changeCode(kormap1))
ggChoropleth(data = korpop1,       # 지도에 표현할 데이터
aes(fill = pop,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = kormap1,        # 지도 데이터
interactive = T)        # 인터랙티브
library(ggiraphExtra)
ggChoropleth(data = korpop1,       # 지도에 표현할 데이터
aes(fill = pop,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = kormap1,        # 지도 데이터
interactive = T)        # 인터랙티브
library(dplyr)
ggChoropleth(data = korpop1,       # 지도에 표현할 데이터
aes(fill = pop,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = kormap1,        # 지도 데이터
interactive = T)        # 인터랙티브
library(dplyr)
ggChoropleth(data = korpop1,       # 지도에 표현할 데이터
aes(fill = pop,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = kormap1,        # 지도 데이터
interactive = T)        # 인터랙티브
library(ggplot2)
ggChoropleth(data = korpop1,       # 지도에 표현할 데이터
aes(fill = pop,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = kormap1,        # 지도 데이터
interactive = T)        # 인터랙티브
ggChoropleth(data = tbc,           # 지도에 표현할 데이터
aes(fill = NewPts,    # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = kormap1,        # 지도 데이터
interactive = T)      # 인터랙티브
library(kormaps2014)
library(dplyr)
korpop1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동)
rm(korpop1)
korpop1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동)
str(changeCode(kormap1))
ggChoropleth(data = korpop1,       # 지도에 표현할 데이터
aes(fill = pop,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = kormap1,        # 지도 데이터
interactive = T)        # 인터랙티브
library(ggiraphExtra)
ggChoropleth(data = tbc,           # 지도에 표현할 데이터
aes(fill = NewPts,    # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = kormap1,        # 지도 데이터
interactive = T)      # 인터랙티브
library(ggplot2)
ggChoropleth(data = korpop1,       # 지도에 표현할 데이터
aes(fill = pop,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = kormap1,        # 지도 데이터
interactive = T)        # 인터랙티브
ggChoropleth(data = tbc,           # 지도에 표현할 데이터
aes(fill = NewPts,    # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = kormap1,        # 지도 데이터
interactive = T)      # 인터랙티브
install.packages("plotly")
library(plotly)
library(ggplot2)
p <- ggplot(data=mpg, aes(displ, hwy, col=drv))+geom_point()
ggplot(data=mpg, aes(displ, hwy, col=drv))+geom_point()
ggplotly(p)
ggplot(data=mpg, aes(displ, hwy, col=drv))+geom_point()
ggplotly(p)
library()
remove.packages("string1, kormaps2014")
remove.packages("string1", "kormaps2014")
remove.packages("string1", "kormaps2014")
remove.packages("string1")
remove.packages("stringi", "kormaps2014")
remove.packages("stringi")
remove.packages("kormaps2014")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("cardiomoon/kormaps2014", force = TRUE)
library(kormaps2014)
library(ggiraphExtra)
library(dplyr)
korpop1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동)
str(changeCode(kormap1))
str(changeCode(korpop1))
korpop1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동)
rm(korpop1)
str(changeCode(kormap1))
korpop1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동)
library(ggplot2)
str(changeCode(korpop1))
korpop1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동)
str(changeCode(kormap1))
ggChoropleth(data = korpop1,       # 지도에 표현할 데이터
aes(fill = pop,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = kormap1,        # 지도 데이터
interactive = T)        # 인터랙티브
plot(Bubble)
Bubble <- gvisBubbleChart(Fruits, idvar="Fruit",xvar = "Sales", yvar = "Profit", options = list(hAxis= '{minValue:75, maxValue:125}'))
library(googleVis)
Bubble <- gvisBubbleChart(Fruits, idvar="Fruit",xvar = "Sales", yvar = "Profit", options = list(hAxis= '{minValue:75, maxValue:125}'))
plot(Bubble)
########
str(kormap1)
rm(kormap1)
install.packages("stringi")
library(kormaps2014)
str(korpop1)
str(changeCode(korpop1))
class(korpop1)
str(korpop1)
library(dplyr)
korpop1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동
)
install.packages("dygraphs")
library(dygraphs)
data()
economics
economics <- ggplot2::economics
head(economics)
library(xtx)
?xts
??xts
eco <- xts(economics$unemploy, order.by= economics$date)
head(eco)
eco <- xts(economics$unemploy, order.by= economics$date)
library(xtx)
library(xts)
eco <- xts(economics$unemploy, order.by= economics$date)
head(eco)
dygraph(eco)
dygraph(eco) %>% dyRangeSelector()
eco_a <- xts(economics$psavert, order.by = economics$date)
eco_b <- xts(economics$unemploy /1000, order.by = economics$date)
eco2 <- cbind(eco_a, eco_b)
eco2
head(eco2)
colnames(eco2) <- c("psavert", "unemploy")
head(eco2)
dygraph(eco2) %>% dyRangeSelector()
mpg <- as.data.frame(ggplot2::mpg)
library(dplyr)
mpg_diff <- mpg %>%
select(class, cty) %>%
filter(class %in% c("compact", "suv"))
head(mpg_diff)
table(mpg_diff)
table(mpg_diff$class)
t.test(data = mpg_diff, cty ~ class, var.equal = T)
var(mpg_diff)
t.test(data = mpg_diff, cty ~ class, var.equal = T)
## -------------------------------------------------------------------- ##
mpg <- as.data.frame(ggplot2::mpg)
library(dplyr)
mpg_diff <- mpg %>%
select(class, cty) %>%
filter(class %in% c("compact", "suv"))
head(mpg_diff)
table(mpg_diff$class)
t.test(data = mpg_diff, cty ~ class, var.equal = T)
t.test(data = mpg_diff, cty ~ class, var_equal = T)
?t.test
economics <-  as.data.frame(ggplot2::economics)
cor.test(economics$unemploy, economics$pce)
head(mtcars)
car_cor <- cor(mtcars)
class(car_cor)
round(car_cor, 2)
head(mtcars)
head(car_cor)
car_cor <- round(car_cor, 2)
head(car_cor)
install.packages("corrplot")
library(corrplot)
corrplot(car_cor)
corrplot(car_cor, method = "number")
?colorRampPalette
col <- colorRampPalette(c("blue", "red", "white", "yellow"))
corrplot(car_cor,
method = "color",
col = col(200),
type = "lower"
)
corrplot(car_cor,
method = "color",
col = col(200),
type = "lower",
order = "hcluster"
)
corrplot(car_cor,
method = "color",
col = col(200),
type = "lower",
order = "hclust"
)
corrplot(car_cor,
method = "color",
col = col(200),
type = "lower"
)
corrplot(car_cor,
method = "color",
col = col(200),
type = "lower",
order = "hclust",
addCoef.col = "black"
)
corrplot(car_cor,
method = "color",
col = col(200),
type = "lower",
order = "hclust",
addCoef.col = "black",
tl.col = "tomato"
)
corrplot(car_cor,
method = "color",
col = col(200),
type = "lower",
order = "hclust",
addCoef.col = "black",
tl.col = "skyblue"
)
corrplot(car_cor,
method = "color",
col = col(200),
type = "lower",
order = "hclust",
addCoef.col = "black",
tl.col = "skyblue",
tl.srt = 45
)
corrplot(car_cor,
method = "color",
col = col(200),
type = "lower",
order = "hclust",
addCoef.col = "black",
tl.col = "skyblue",
tl.srt = 45,
diag= F
)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
plot(pressure)
plot(cars)
plot(pressure)
mpg <- as.data.frame(ggplot2::mpg)
library(dplyr)
mpg_diff <- mpg %>%
select(class, cty) %>%
filter(class %in% c("compact", "suv"))
head(mpg_diff)
table(mpg_diff$class)
t.test(data = mpg_diff, cty ~ class, var.equal = T)
mpg <- as.data.frame(ggplot2::mpg)
library(dplyr)
mpg_diff <- mpg %>%
select(class, cty) %>%
filter(class %in% c("compact", "suv"))
head(mpg_diff)
table(mpg_diff$class)
t.test(data = mpg_diff, cty ~ class, var_equal = T)
a = c(175, 168, 168, 190, 156, 181, 182, 175, 174, 179)
b = c(185, 169, 173, 173, 188, 186, 175, 174, 179, 180)
var.test(a, b)
# 내장 함수
setwd("c:/ace_R/easy_r")
exam <- read.csv("csv/csv_exam.csv")
exam
exam[]
class(exam)
exam
exam[1,]
exam[2,]
exam
exam[1, 1]
exam[1, id]
exam[1, exam$id]
exam[1, "id"]
exam[exam$class ==1,]
exam[exam$math >= 70,]
library(dplyr)
exam %>% filter(exam$math >= 70)
exam[exam$class==1 & exam$math >= 70,]
exam[exam$class==1 & exam$math >= 60,]
exam[1,]
exam[exam$class ==1,]
exam[,1]
exam[,2]
exam[,"class"]
exam[,c("id", "class", "math")]
exam[exam$math > 50, "english"]
exam %>% select("english") %>% filter(math >50)
exam %>% filter(math >50) %>% select("english")
aggregate(data=exam[exam$math >=50 & exam$english >=80,], tot ~ class, mean)
exam$tot <- (exam$math + exam$english + exam$science) / 3
aggregate(data=exam[exam$math >=50 & exam$english >=80,], tot ~ class, mean)
exam %>%
filter(math >= 50 & english >=80) %>%
mutate(tot = (math + english + science) / 3)
exam %>%
filter(math >= 50 & english >=80) %>%
mutate(tot = (math + english + science) / 3) %>%
group_by(class) %>%
mean(tot)
exam %>%
filter(math >= 50 & english >=80) %>%
mutate(tot = (math + english + science) / 3) %>%
group_by(class) %>%
summarise(mean(tot))
var1 <- c(1,2,3,2,1)
var2 <- factor(c(1,2,3,2,1))
var1
var2
var1 + 3
var2 + 3
class(var1)
class(var2)
leves(var2)
levels(var2)
levels(var1)
table(var1)
table(var2)
mean(var1)
mean(var2)
is.factor(var2)
var2 <- as.numeric(var2)
is.factor(var2)
is.numeric(var2)
levels(var2)
class(mpg$drv)
a <- 1
a
a[1]
b <- "hello"
b
class(a)
class(b)
x2 <- matrix(c(1:12), ncol = 2)
x2
class(x2)
x2
x3 <- array(1:20, dim = c(2, 5, 2))
x3
class(x3)
x4 <- list(f1 = a,
f2 = head(mpg),
f3 = x2,
f4 = x3)
x4
x4[f1]
x4["f1"]
x4["f4"]
x4["f3"][,1]
x4["f3"][1]
mpg
boxplot(mpg)
boxplot(mpg$cty)
x <- boxplot(mpg$cty)
x
boxplot(mpg$cty)$stats
x
x$names
x$stats[,1][3]
basic_url <- "http://news.donga.com/search?query=bikini&more=1&range=3&p="
basic_url
basic_url <- "http://news.donga.com/search?query=bikini&more=1&range=1&p="
basic_url
url <- NULL
urls <- NULL
for(x in 0:5){
urls[x+1] <- paste0(basic_url, x*15+1)
}
urls
install.packages("rvest")
library(rvest)
library(rvest)
html <- read_html(urls[1])
html
html2
html2 <- html_nodes(html, 'searchCont')
html2
html2 <- html_nodes(html, '.searchCont')
html2
html3 <- html_attr(html2, 'href')
html3
html2
html3 <- html_attr(html2, 'href')
html3
html2 <- html_nodes(html, '.searchCont')
html2
html3 <- html_attr(html2, 'href')
html3
html <- read_html(urls[1])
html
html2 <- html_nodes(html, '.searchList')
html2
html3 <- html_nodes(html2, 'a')
html3
links <- html_attr(html3, "href")
links
links <- unique(links)
links
length(link)
length(links)
for(link in links){
html <- read_html(link)
txts <- c(txts, html %>% html_nodes('.article_txt') %>% html_text())
}
txts <- NULL
for(link in links){
html <- read_html(link)
txts <- c(txts, html %>% html_nodes('.article_txt') %>% html_text())
}
txts
txts
basic_url <- "https://www.seoul.go.kr/freeboard/praiseboard.do#list/"
basic_url
urls <- NULL
for(x in 0:5){
urls[x+1] <- paste0(basic_url, x*10+1)
}
urls
html <- read_html(urls[1])
html
